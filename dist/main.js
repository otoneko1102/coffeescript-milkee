// Generated by CoffeeScript 2.7.0
(function() {
  var CONFIG_FILE, CONFIG_PATH, CWD, argv, compile, consola, exec, fs, hideBin, path, pkg, setup, yargs;

  yargs = require('yargs');

  ({hideBin} = require('yargs/helpers'));

  consola = require('consola');

  fs = require('fs');

  path = require('path');

  ({exec} = require('child_process'));

  pkg = require('../package.json');

  CWD = process.cwd();

  CONFIG_FILE = 'coffee.config.js';

  CONFIG_PATH = path.join(CWD, CONFIG_FILE);

  setup = function() {
    var CONFIG_TEMPLATE, TEMPLATE_PATH, error;
    if (fs.existsSync(CONFIG_PATH)) {
      consola.warn(`\`${CONFIG_FILE}\` already exists in this directory.`);
      return;
    }
    try {
      TEMPLATE_PATH = path.join(__dirname, '..', 'temp', 'coffee.config.js');
      CONFIG_TEMPLATE = fs.readFileSync(TEMPLATE_PATH, 'utf-8');
      fs.writeFileSync(CONFIG_PATH, CONFIG_TEMPLATE);
      return consola.success(`Successfully created \`${CONFIG_FILE}\`.`);
    } catch (error1) {
      error = error1;
      consola.error(`Failed to create \`${CONFIG_FILE}\`:`, error);
      return consola.info(`Template file may be missing from the package installation at \`${TEMPLATE_PATH}\``);
    }
  };

  compile = function() {
    var command, commandParts, config, error, key, options, otherOptionStrings, value;
    if (!fs.existsSync(CONFIG_PATH)) {
      consola.error(`\`${CONFIG_FILE}\` not found in this directory: ${CWD}`);
      consola.info('Please run `milkee --setup` to create a configuration file.');
      process.exit(1);
    }
    try {
      config = require(CONFIG_PATH);
      if (!(config.entry && config.output)) {
        consola.error('`entry` and `output` properties are required in your configuration.');
        process.exit(1);
      }
      options = config.options || {};
      commandParts = ['coffee'];
      if (options.join) {
        commandParts.push('--join');
        commandParts.push(`\"${config.output}\"`);
      } else {
        commandParts.push('--output');
        commandParts.push(`\"${config.output}\"`);
      }
      delete options.join;
      otherOptionStrings = [];
      for (key in options) {
        value = options[key];
        if (value === true) {
          otherOptionStrings.push(`--${key}`);
        } else if (value !== false) {
          otherOptionStrings.push(`--${key} \"${value}\"`);
        }
      }
      if (otherOptionStrings.length > 0) {
        commandParts.push(otherOptionStrings.join(' '));
      }
      commandParts.push('--compile');
      commandParts.push(`\"${config.entry}\"`);
      command = commandParts.filter(Boolean).join(' ');
      consola.start(`Compiling from \`${config.entry}\` to \`${config.output}\`...`);
      consola.info(`Executing: ${command}`);
      return exec(command, function(error, stdout, stderr) {
        if (error) {
          consola.error('Compilation failed:', error);
          if (stderr) {
            process.stderr.write(stderr);
          }
          process.exit(1);
          return;
        }
        consola.success('Compilation completed successfully!');
        if (stdout) {
          process.stdout.write(stdout);
        }
        if (stderr) {
          return process.stderr.write(stderr);
        }
      });
    } catch (error1) {
      error = error1;
      consola.error('Failed to load or execute configuration:', error);
      return process.exit(1);
    }
  };

  argv = yargs(hideBin(process.argv)).scriptName('milkee').usage('$0 [command]').option('setup', {
    alias: 's',
    describe: 'Generate a default coffee.config.js',
    type: 'boolean'
  }).option('compile', {
    alias: 'c',
    describe: 'Compile CoffeeScript based on coffee.config.js (default)',
    type: 'boolean'
  }).version('version', pkg.version).alias('v', 'version').help('help').alias('h', 'help').argv;

  if (argv.setup) {
    setup();
  } else {
    compile();
  }

}).call(this);
